<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | YYLFC]]></title>
  <link href="http://yanyujason.github.io/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://yanyujason.github.io/"/>
  <updated>2017-03-18T02:12:08+08:00</updated>
  <id>http://yanyujason.github.io/</id>
  <author>
    <name><![CDATA[Yan Yu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Offshore项目遇上Deadline]]></title>
    <link href="http://yanyujason.github.io/blog/2017/03/07/offshorexiang-mu-yu-shang-deadline/"/>
    <updated>2017-03-07T22:33:24+08:00</updated>
    <id>http://yanyujason.github.io/blog/2017/03/07/offshorexiang-mu-yu-shang-deadline</id>
    <content type="html"><![CDATA[<p>  2013年12月至今，我一直工作在海外交付项目上，经历了大大小小十多个项目，由于公司和我所在项目的客户都很推崇敏捷实践，所以对项目上的敏捷实践也有一点自己的看法。敏捷提倡快速响应变化，所以敏捷实践不是一成不变的，而且敏捷理论也不是在所有的项目中都适用，它需要根据项目的实际情况进行相应调整，这就需要团队在项目过程中积极识别项目的风险和问题、评估这些风险和问题，最终找到解决的方法。这篇文章就是我自己对近期的一个项目上的实践进行的总结，以及在项目中遇到的具体问题的一些解决方法。</p>

<h2>项目背景</h2>

<p>项目主要是为澳洲某建筑开发商构建一个展示自身信息的网站，主要包括了开发商公司信息、品牌、房屋设计信息、样板间信息以及社交联系方式等，整个项目一共分为两个阶段：</p>

<ul>
<li><p>第一阶段是构建一个响应式的前端页面用于展示开发商的所有信息，并且只为6个测试开发商上线，用于产品的快速验证和反馈，所以所有数据以JSON格式存放于AWS的S3上，没有后台数据API，前端页面直接消费这6个JSON文件。简单来说就是从JSON读数据并在前端渲染页面。</p></li>
<li><p>第二阶段是构建一个管理页面，用于对所有目标开发商提供信息录入功能，并将所有信息存入数据库并生成第一阶段所需要的JSON文件，放入S3。简单来说就是构建一个信息录入页面并保存至数据库和S3。</p></li>
</ul>


<p>项目第一阶段的前端页面成功上线，反馈良好，所以项目第二阶段如期开始。为了更好地实现第二阶段的项目需求，在第一阶段项目结束后，整个项目组（包含客户）进行了一次项目的<a href="https://en.wikipedia.org/wiki/Retrospective#Software_development">retrospective</a>，用于发现项目第一阶段实践中的问题并解决，避免第二阶段重复犯错。一些问题被挖掘出来，比如每个<a href="https://en.wikipedia.org/wiki/Scrum_(software_development">迭代</a>)的计划做的不好、每个故事卡的预估(Estimation)做的不好、故事卡每个阶段的状态以及从开始开发到上线的时长没有追踪、代码实现完成后与QA的交接没有做好（比如很难同时找到BA、QA以及UX一起做），大家也积极讨论解决方案，最终产出了一些行动。并且在第二阶段的项目启动中，全组成员一起了解需求，拆分epic，对每张故事卡做了预估，最后提出了解决方案和完成架构的设计。这套架构方案很好的解决了项目需求：</p>

<ul>
<li><p>采用前后端分离，前端使用React和Redux，因为录入信息都是通过页面表单形式，所以也引入了Redux-form，前端只获取数据渲染页面；后端使用Rails-api，提供数据在Postgres数据库中的增删改查；在前后端之间又加入了一层Backend-for-Frontend（并不是传统意义上的BFF），目的是用于前端请求的转发，用户访问权限的校验，以及与第三方服务（比如Image server）的集成等。</p></li>
<li><p>数据录入数据库后，使用AWS的Kinesis和Lambda服务将开发商所有录入信息生成的JSON文件导入S3供第一阶段的前端页面使用。</p></li>
</ul>


<p>这是一个看起来很不错的设计，当然，也可以直接选择一套更为直接的Ruby on Rails解决所有问题。作为一个稍微有点节操的码农自然不会选择ROR那样子的设计，原因不详述。根据这个设计，我们也作出了估计：现有人员配置为2名产品经理，1名交付经理，1名业务分析师，1名测试人员，1名Ops和7名开发（除了其中4名开发外，其余都是客户团队，并且业务分析师能力不足），项目7月中旬开始，大约需要4个月时间到11月中旬完成第一个里程碑（Milestone）的所有需求。2名产品经理也很认可，项目如期开始了。</p>

<p>这套系统看似简单，实际很复杂，有新代码库的构建，有跟其他3个已有系统的集成，也有一些AWS服务的使用。再细节一点，前端代码JS、CSS的打包，前端任务的构建等，一共花费了5名开发人员和1名Ops人员1个迭代（2周）左右的时间完成了三个代码库、CI Pipeline以及AWS相关服务的构建。也就是说在8月初的时候才开始实现产品功能。8月中旬的一天，DL突然给整个团队一个惊喜，那就是由于业务和销售方面的原因，原定于11月中旬的发布需要提前至10月3日，掐指一算，提前了4个迭代（8周）。项目突然有了deadline！</p>

<p>对于这个晴天霹雳，作为一个拥有4名成员的专业的服务性团队，我们依据关于开销（Cost）、时间（Time）和产品范围（Scope）的三角形原则（见图一)，给出了最常见的应对方案，增加开销（增加开发人员）和减小产品功能范围。</p>

<div style="text-align:center" markdown="1">
<img src="http://yanyujason.github.io/images/blogs/quality-triangle.png" width = "350" height = "350" />
<p>图一：质量三角形原则</p>
</div>


<p>增加开发人员就不细说了，项目只要有预算，可以尽可能多的加人，唯一要考虑的是加什么样的人。往往这种短期的加人对人的要求更高，需要快速了解业务，快速上手代码，不然加人只会拖慢项目进度，因为<a href="https://en.wikipedia.org/wiki/Pair_programming">结对编程</a>时需要更多的进行业务的讲解和技术基础知识的培训，这是不合适的。下面主要说说减少产品功能的问题。</p>

<h2>Deadline下的<a href="https://www.techopedia.com/definition/27809/minimum-viable-product-mvp">MVP</a></h2>

<p>对于突然设置的Deadline，团队果断采用MVP(Minimum Viable Product)的思想来应对，下面来谈一谈我们项目在Deadline压力下使用MVP思想时遇到的问题和一些项目实践，以及自己的看法。</p>

<h3>故事卡优先级</h3>

<p>在项目对交付时间有压力时，就要对项目的需求进行重新评估。在我们项目中，无论是产品经理还是我们开发人员本身都参与了很多关于需求梳理方面的工作。</p>

<p>第一项就是排优先级，产品经理、业务分析师和用户体验设计师会将所有必须上线的功能从现有的故事墙上（项目启动时，epic的划分和epic中的需求大部分已经明确，所以项目开始就建好了所有的故事卡）挪出，排好业务上的优先级，然后将所有排好的故事卡给所有开发人员和测试人员，开发和测试人员一起对每一个故事卡进行估点，然后再由产品经理根据业务优先级和技术难度和工作量决定哪些需求要做，哪些需求先做，哪些需求可以去掉。具体的策略如下图：</p>

<div style="text-align:center" markdown="1">
<img src="http://yanyujason.github.io/images/blogs/estimation-value.png" width = "350" height = "350" />
<p>图二：优先级</p>
</div>


<p>先做高业务优先级并且低开发成本的故事卡，再做高业务高开发成本的故事卡，接着是低业务低开发成本的故事卡，最后舍弃掉低业务高开发成本的功能。最终业务分析师和交付经理会根据项目组的工作速率(Velocity)给出发布前的迭代的计划。</p>

<h3>功能优先</h3>

<p>功能优先，顾名思义，就是说优先实现所需要的功能，用户的体验在一些特定条件下可以削弱，比如，内部系统的UI层的用户体验可以不必像给真实用户的那么完美。举个例子：</p>

<blockquote><p>在项目中，给真实用户的前端页面会在谷歌地图上显示不同样板间的地理位置信息，所以管理人员在后台信息录入时需要在谷歌地图上自定义样板间的位置，然而这个在地图上拖拽的需求在业务上（至少是在上项目的第一个milestone发布前）没那么重要，转而采用的是经纬度的录入。这样，前端仍然可以给真实用户显示合适的位置，但是开发人员在开发时的时间会减少很多。</p></blockquote>

<p>在milestone 1中，页面的样式也不需要很完美，我们只需要给内部管理用户提供一个功能健全的表格供他们录入信息，至于一些提升用户体验的功能，比如系统发生错误时的提示消息的样式、区分页面不同组件的背景色的样式等，都可以省去不做。当然，也不是说一点样式没有，如果没有样式，网站的可用性会大打折扣，比如：表格字段验证失败的错误信息提示还是会显示在校验失败字段的上方，只是没有提示的文字没有背景色，同时也没有将输入框高亮起来。</p>

<p>但是，功能优先的一个负面影响是对于那些解决方案不明确的功能卡，没有时间专门去创建spike卡来研究解决方案并且追踪。</p>

<blockquote><p>Spike卡：当完成一些需求是有一定的技术问题，或者解决方案尚不明确，又或者对所需要的第三方服务不了解时，通常会创建一张Spike卡用于研究调查并解决这些技术问题、了解所有依赖的第三方服务用法，并且提出一个合理的解决方案。不需要完成对功能的实现代码，只需要输出解决方案即可。</p></blockquote>

<p>所以当遇到这些有技术问题的故事卡时，在估点时基于解决方案已经清楚的原则，估出来的点数往往小于实际的点数。当然，也可以将Spike的点数直接估计在故事卡中，往往这样做会使故事卡的点数太大，影响准确性。所以在开发这些故事卡时，我们不得不给Spike一个很短的时间限定，当有多种解决方案的时候，可能直接会选择简单或者耗时短的那一种，并没有太多考虑将来的复用性或者功能的可扩展性。在将来，这种解决方案很可能不能很好地支持所需要的新功能。而且Spike的时间越短，对代码设计或者方案本身的评估来说也会越不准确，很可能因为Spike不足，引入其他问题。比如选定的一种React组件不能满足新需求新功能的时候，就会需要花费更多的时间去重新实现已有功能，再开始实现新功能。而选择功能优先确实也为我们在Milestone 2带来了一定的时间浪费。</p>

<h3>速度优先</h3>

<p>对于开发人员，尤其是在项目交付时间压力比较大的团队里，如何平衡交付速度和技术追求成了一个很难解决的问题。项目工作量很多，开发人员需要保证项目及时交付。但对于开发人员本身，又需要对代码质量和代码追求有最基本的底线和节操。</p>

<p>在项目过程中的一次Retrospective里，客户PM和DL明确指出项目“Speed first，code quality second”。又由于开发人员自身原因，比如作为v软件的供应商(Vendor)，心里难免有Vendor心态，就是客户提出来的要求都需要尽量满足，客户说什么就是什么，那就先交付吧，其实并没有按照合作方或者作为一支专业的技术服务团队应有的态度去跟客户分析速度优先带来的问题。</p>

<p>在deadline的压力下，项目经理和交付经理也有来自其他部门的压力，比如来自销售团队和更高一级领导的压力，所以经常在<a href="https://en.wikipedia.org/wiki/Stand-up_meeting">站会</a>上或者项目迭代计划会议上听到交付经理会问所有人：“我们还有30天，还剩31个故事卡，可以做完吗？”“这个迭代有15张卡，你们做的完吧？”之类的问题。无形之中给团队带来很大精神层面的压力。</p>

<p>一味的追求速度，会使开发人员，尤其是团队里面的新人养成很不好的开发习惯，比如：</p>

<blockquote><p>1.对故事卡不做Kickoff。在交付压力下，开发人员潜移默化地选择尽可能快的拿故事卡做故事卡，并没有与相关人员一起进行故事卡的Kickoff，所以在做卡过程中加入了开发人员自己对功能的理解，而这些理解并不是产品经理真正想要的需求。这会导致故事卡的复工。</p>

<p>2.不做Showcase。因为找齐业务分析师、测试人员和用户体验设计师对故事卡进行展示(Showcase)比较难，或者觉得大家都理解功能是什么、这张故事卡要做什么，没必要找齐他们做showcase。带来的后果是一些Bug没有第一时间被发现，导致该功能不能上线，需要打回继续开发。但是开发这张卡的开发人员又开始了新的故事卡，边做新卡边修Bug，需要在不同的卡上来回切换，影响开发效率和质量。</p></blockquote>

<p>在速度优先的思想下，团队遇到了一些问题，也根据团队自己的理解提出了一些改进：</p>

<h4>故事卡过大</h4>

<p>由于业务分析师技能的缺失，导致很多故事卡过大，功能点过多。这会带来一下两方面影响：</p>

<ul>
<li><p><strong>Bug数增加</strong> 因为开发人员需要考虑每一个需求的每一种情况，所以需求多了，所要考虑的点也就越多，难免会漏掉一些，增加了Bug数。</p></li>
<li><p><strong>估点不准确</strong> 如果估点少了，开发人员在开发时候的压力会很大。因为有时候开发人员对点数的理解可能有误，觉得每一个点可能就是一天。比如：一张卡估了5个点，当做到第3天的时候，发现还有几个需求没有实现，这样会给开发带来很大压力，对需求考虑的完整性也会大大下降，进而导致更多的复工和bug。</p></li>
</ul>


<p>故事卡太大怎么办？很明显就会想到——拆卡。像业务分析师提出拆卡需求时，一般提倡拿出拆卡的理由并给出如何拆卡的建议，尤其是与技术相关时。在我们项目中，尝试过两种拆卡方式：</p>

<ul>
<li><p><strong>前后端分离拆卡</strong> 将一个故事卡的前端和后端工作分开，前端一张卡，后端一张卡。比如：</p>

<blockquote><p>项目需要录入开发商的每一个设计的信息，表单内容非常多，而且每个信息都有一些校验。前端的卡包括渲染表单页面，发送获取现有信息、存储新信息的请求，以及页面基本的样式；后端的卡包括完成信息增删改查的API和存储校验。</p></blockquote>

<p>这样做的好处是人员可以充分利用，前端能力强的人专注前端，后端能力强的人专注后端，各取所长，提升交付速度。缺点在于提升了沟通和测试成本，前后端的故事卡需要提前沟通好数据格式。如果前期没有考虑周全，在开发过程中一点点数据格式的变动可能会引起很大的修改。而且有时候前后端分开后的两张卡不是同时做，一对Pair定义好的数据格式由于缺少沟通，需要花费下一对Pair一定时间去查看（当然可以有些协议测试来保证，但是项目中并没有引入）。在前后端做完后，需要有一张独立的卡开做集成，比较耗时。</p>

<p>对于测试来说，单纯的后端的卡只能通过一些工具（比如Postman）来测试；前端的卡，只能通过浏览器工具看看数据是不是真的发到了后台；对于集成的卡，又需要再将前后端集成测试一遍，也很耗时。对于功能交付来说，我们一般都需要保证每一个故事卡传递一定的用户价值。这么做对于没有集成的独立的前端或者后端的卡，只是隐形的交付了一些价值。在集成卡没有上线时，产品经理因为功能不可用，所以不认为这是交付物。所以：</p>

<blockquote><p>我认为这种拆卡方式只适合于产品定期发布，也就是完成了很多功能后一次上线。并不适合持续发布，因为对于前后端分离的系统，只有前端展示页面而没有后台逻辑处理就发布到产品环境是很搞笑的。</p></blockquote></li>
<li><p><strong>按功能点拆卡</strong> 与前后端拆卡不同，这样拆卡可以保证每一个子卡在做完后都是一个可以交付的产物。举例说明：</p>

<blockquote><ul>
<li><p>刚才那个例子，对于开发商的设计信息的录入，可以拆成上传设计图片，填写设计基本信息，以及添加不同的设计的数据校验</p></li>
<li><p>在做对于房屋设计的筛选功能时，可以拆成按照面积过滤、按照层数过滤，按照卧室数量过滤等。</p></li>
</ul>
</blockquote>

<p>按照功能点拆卡后，每一张子卡都可以在做完后独立发布。这样做的缺点是有时候一些相似的功能点在并行开发时，会产生一些重复代码。比如我们项目前端用的是React，在面积过滤和卧室数量过滤时的两个组件是可以复用的。如果一起开发，不同的开发人员可能会写出不同的组件，需要在后面花时间重构，这会增加开发时间。另一个问题是如果拆分的不合理，会使卡产生依赖，就是说A卡必须在B卡结束后才能开始开发。但是如果合理做卡的计划，这个问题就不是一个大问题。</p>

<blockquote><p>我认为这种拆卡方式比较适合产品已经上线，但是仍然需要增加新功能的时候使用。可以做到持续发布。</p></blockquote></li>
</ul>


<p>项目上因为故事卡太大，走过很多弯路，也浪费了很多开发和沟通时间，但是慢慢通过自己的拆卡，达到了一个让所有人都接受的程度。解决这个问题我的看法是：</p>

<blockquote><p>当通过拆卡保证这些大的故事卡不会成为影响交付速度和交付质量的阻碍时，就算做的不错！</p></blockquote>

<h4>需求频繁变更与估点</h4>

<p>这是一个大家都熟悉的话题，我想所有接触敏捷的人都已经理解了估点的意义和做法。但是我想要说的是敏捷里的估点的概念有时候在外部条件影响下，可能并不能够被完美执行。最主要的问题是——耗时。</p>

<p>7个开发，4-5对的Pair，对一个自身技能并不出色的业务分析师来说，是很大挑战，所以经常会发现故事卡的需求很不明确，故事卡需求的划分也很不明确。如果按部就班的做估点，那么对需求就会有很多假设。基于这些假设做出来的估点最大的缺陷就是当需求明确时，并且实际需求跟当时的假设不完全匹配，估点这项工作肯定是需要重新做的。又需要召集所有开发和测试，重新花时间做估点。</p>

<p>所以我们决定改变传统意义上的估点，我们加入了自信心级别。在对每一个卡进行了技术估点之后，我们又加入了对这个卡的信心估点，也就是说每个人要根据自己的技术能力和对需求的理解程度对每一个卡加入自己的信心估值。比如：</p>

<blockquote><p>如果这张卡给我做，我十分确认技术解决方案？还是我只知道可能的方案？或者我没有相关的经验？甚至是我完全不理解需求？</p></blockquote>

<p>每个卡也只花费很短的时间。这带来的好处是帮助了交付经理更好地做项目计划，而且在做卡的时候，根据这个自信心估值，可以提早的进行讨论或者寻求帮助，对进度有促进左右。在计算项目总点数时，我们对于每一张故事卡采用<code>实际点数 = 故事点数 * 自信心估值</code>的算法进行计算。</p>

<p>对于频繁的需求变更，我们的实践是：</p>

<ul>
<li><p>在开发之前的变更，只需要更新故事卡就好。</p></li>
<li><p>在开发过程中的需求变更（在我们项目中经常发生，因为有些需求真的是开发在做的过程中驱动出来的），开发人员需要及时改正，因为如果按照原来的需求做完，项目经理又想要新的需求，可能做之前需求的时间就浪费了。</p></li>
<li><p>在测试时候或者在项目经理复查时候的需求变更，我们会重新建新卡完成，而不是打回给开发继续开发。这是其他项目的标准做法，但是在我们项目中实践的并不好，起初任何需求变更都会放在同一张卡中，反复去做（我经历过3次需求A变更到B再变更回A的过程）。这样做会导致整个故事卡在开发过程中的时间很长，而且很影响故事卡的周期时间(Cycle time)。间接的影响是PM觉得我们这么一个功能做了很长时间，因为PM不会了解所有卡的实现细节，也不会记得每一张卡的需求变更，结果导向来看，确实花了很长时间，而且有些迭代真的只交付了很少卡。</p></li>
</ul>


<p>采用之前提到的三种方法，可以保证卡按照正常流程交付，避免了开发人员被项目经理的误解，也会增加项目经理对开发人员的信心。</p>

<h4>技术债（Tech Debt）卡</h4>

<p>在日常完成故事卡过程中，当发现有任何技术改进点，如果代码改动比较大，耗时比较长，我们会写成一个名为Tech Debt的卡，在项目交付后再做。在创建这些卡后，会给出估点，也会给出做了这个改动，带来的影响是什么，比如会提升代码可读性，节约今后的维护或者扩展成本，还是只是单纯为了代码炫酷。每一张卡都会平衡这些影响。举个例子：</p>

<blockquote><p>Redux-form从Version 5到6的升级: 这个升级需要很大改动，它可以保证新的Redux-form的代码更加可读，也修复了一些本身功能性的不足，但是这一次的修改会引起很大的修改，因为一些组件或者整个表单的字段的用法有很大改变，所以需要整体性的评估再决定要不要做。</p></blockquote>

<p>这些“技术债”肯定对当前或者将来有影响，但是要不要还，什么时间还，需要评估来决定。</p>

<h4>Dev huddle</h4>

<p>这是一个被全组都认可的实践。</p>

<p>每天项目所有人会有站会，用于更新每张卡的进度，这更关注与业务方面的更新，由于时间原因，又不能太深的讨论技术细节，所以对于所有的开发人员和测试人我们自己的决定每天开一个关于技术的站会，用来专门讨论当前每对Pair开发的故事卡的解决方案或者遇到的问题，也可以更新自己为项目中引入了什么新的技术，比如一些ruby Gem之类的，我们称这个活动为“Dev huddle”。</p>

<p>起初，我并不认可这个活动，因为让所有开发人员（项目组有7名开发）每天在一起半个小时讨论每个卡是怎么做的本身的成本就很大，而且给我在心里的感觉是我很平常的故事卡的解决方案都需要在其他5名开发的“审阅”之后才可以继续做。这让我的心里存在极大的信任问题。但是经过一段时间后，我改变了这种看法。在Dev huddle上，我们讨论了如何设计API，如何设计数据库结构，如何正确使用Redux-form和一些具体问题的解决方案，有时候也会展示一下未完成的代码，这样的好处有：</p>

<ul>
<li><p>让所有人都对我们的代码库有了很深的了解，知道每个人都在做什么、是怎么做的，所以在做新故事卡的时候可以完全按照优先级来拿卡，不用太考虑我在这个代码库或者我对这个方面的代码逻辑不熟悉。这无形中其实减少了一些卡的阻碍，潜在地提升了速度。</p></li>
<li><p>每个故事卡的解决方案都是被全组认可的，每个人都可以发表自己的意见，可以把自己在某方面的知识分享给大家，这保证了大家都在高交付压力下也能学到东西并且交付质量也是过关的。</p></li>
</ul>


<h4>测试驱动开发（TDD）？</h4>

<p>关于要不要TDD，在项目过程中争议很大。后台API端的TDD还好说，可以比较清楚也比较简单的进行TDD。可是对于前端React组件的测试，由于一些原因（比如开发自身能力不足，对React的单元测试不熟悉），测试的力度如何，什么要测，什么不测，这些都是阻碍前端TDD的障碍。而且，就TDD本身来说，因为每个人对TDD的理解深入程度不同，熟练程度不同，认可度不同，所以强制要求TDD或者短期内深入了解TDD，尤其是前端，在短期有Deadline的项目里看起来并不是很适合。所以，我们达成一致：</p>

<blockquote><p>前端可以先写实现再加入测试，但是要保证测试覆盖率达到标准。</p></blockquote>

<h3>管理客户期望</h3>

<blockquote><p>客户都是贪婪的。</p></blockquote>

<p>期望往往与团队整体的工作速率相关。可是往往因为deadline或者团队的vendor心态会让团队的工作速率突然增加。比如，团队在一个迭代能完成工作速率为20个点，但是客户因为deadline压力在一个迭代中排了20多个点。这时，团队看了这23个点，觉得必须给客户完成，所以采用一些“未告知客户”的加班，或者放弃一些好的代码实践最终完成了23个点，这时团队暴露的速率会因为工作时间加长而增加。这时“贪婪”的客户势必会给之后迭代排更多的点，而团队一次次的“牺牲”最终都满足客户“贪婪”的期望，客户会更加“贪婪”，直到团队达到极限。</p>

<p>这对于团队来说是很危险的，连续地过度工作加上一切其他因素（比如交流问题等）会让团队士气低落。在项目进行到中期，团队在每一个迭代都完成了客户“贪婪”的期望后，还是在被反复询问“在10月3号之前可以做完吗？这个迭代plan的卡可以做完吗？”诸如此类很不专业的问题。事实上这个问题对于开发很难回答，尤其是在估点也做的很不好的团队，大家都选择沉默（这是不好的），所以客户会觉得没有反对意见，那么就是可以完成了。组里中间有一个其他组过来帮忙的开发人员在工作了两周后，发表感慨：“你们每天工作时间好长，感觉早上下午只有一次站起来去喝水的机会。”这是也不是一个好的实践。</p>

<p>所以，如何管理客户期望，成了主要问题。当时有个同事给出建议：“下一次客户再在制定计划点数时超过团队速率时，你们故意不要完成，这样团队压力就不会太大了。”这并不是一个从根本解决问题的方案。我认为，这或许可以压低客户期望，但是并不是从根本解决问题的方式，反而会让客户觉得团队的热情减少。在进行了深层次的讨论后，得出结论：</p>

<blockquote><p>选择正确的估点有助于正确管理客户期望。</p></blockquote>

<p>之前我们给每一张卡的估点采用T-shirt的方式，只有Small，Medium和Large三种，迭代经理计算团队工作速率的方式更是采用了数故事卡个数的方式。然而组内业务分析师的能力并没有达到可以把每一个故事卡拆的一样大小。这样就导致客迭代经理对团队工作速率理解有着很大的偏差，所以在做计划的时候也不准确。团队多次客户迭代经理提出要用费布拉切数列方式估点，用点数来计算团队速率，客户终于同意，并且在每个迭代里面只排跟速率相同点数的故事卡。前面两次我们都只是提出了我们应该怎么做，这么做的好处是什么这样的理论，但是并没有将真实的数据反应给客户，比如我们自己并没有采用费布拉切数列真正给每个故事卡估点，直到我们自身实践，客户也真的看到了这样做的好处，所以最后一次他也做出了改变。其实在这里，并不是想说如何以正确的方式去做估点和计算团队工作速率，我想强调的是：</p>

<blockquote><p>在给客户提出任何建议的时候，数据支持是强有力的武器。需要从团队自身做起，把好的实践应用到项目里，通过这些时间潜移默化的促进项目进展，也慢慢的影响客户的工作方式，这才是应该做的，而不是整天抱怨项目压力大，客户难搞。</p></blockquote>

<h2>小结</h2>

<p>这些就是我们项目上遇到的一些问题和我们为了解决这些问题的一些实践。总结一下就是，项目进行过程中，一些有悖于敏捷最佳实践的问题肯定都会存在，我们要做的并不是将敏捷那些最基本的流程和概念强行加入到自己的项目中，要做的是将那些好的理论转化成为最适合自己项目的好的实践，保证项目按时保质的交付，这才是最重要的。好的敏捷不是将理论生搬硬套，而是需要根据敏捷的思想结合项目本身特点和项目发展的阶段进行适当的调整，得到最适合项目的实践更加重要。也正是因为项目突然设定的deadline，让我从项目实践中对原来根深蒂固的敏捷流程有了一些更加深刻的认识，那就是：</p>

<blockquote><p>项目中那些不恰当的行为是不可避免的，但是至少我们自己要知道什么地方做的不对。</p></blockquote>
]]></content>
  </entry>
  
</feed>
